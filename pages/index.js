import {useState, useEffect} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import WalletConnect from '@walletconnect/web3-provider'
import { ethers } from 'ethers'
import { SignatureType, SiweMessage, generateNonce } from 'siwe'

export default function Home() {
  const [awaitingVerification, setAwaitingVerification] = useState(false)
  const [ethAddress, setEthAddress] = useState("")
  const [ensString, setEnsString] = useState("")
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  async function signIn(connector) {
    if (typeof window !== "undefined") {
      setAwaitingVerification(true)
      if (connector === 'window') {
          await window.ethereum.request({method: 'eth_requestAccounts'})
          await generateSignValidateMessage(new ethers.providers.Web3Provider(window.ethereum))
          setAwaitingVerification(false)
      } else {
        const walletconnect = new WalletConnect({infuraId: 'cf20dfc01b0f471192ceb55fdab69316'})
        try {            
          await walletconnect.enable()
          await generateSignValidateMessage(new ethers.providers.Web3Provider(walletconnect))
          setAwaitingVerification(false)
          await walletconnect.disconnect()
        } catch (error) {
          await walletconnect.disconnect()
          console.log(error)
          setAwaitingVerification(false)
        }
      }
    }
  }

  async function generateSignValidateMessage(provider) {
    try {
      const [address] = await provider.listAccounts()
      if (!address) {
          throw new Error('Address not found.')
      }
      const ens = await provider.lookupAddress(address) || ""
      const nonce = generateNonce()
      const expiration = new Date(Date.now() + 5*60000)
      const notBefore = new Date()
      const message = new SiweMessage({
          domain: document.location.host,
          address,
          chainId: `${await provider.getNetwork().then(({ chainId }) => chainId)}`,
          uri: document.location.origin,
          version: '1',
          statement: 'Some text that you will recognize',
          type: SignatureType.PERSONAL_SIGNATURE,
          expirationTime: expiration.toISOString(),
          notBefore: notBefore.toISOString(),
          nonce,
      })
      const signature = await provider.getSigner().signMessage(message.signMessage())
      message.signature = signature
      console.log('signed', message)
      // need to pass a JsonRpcProvider to validate if https://eips.ethereum.org/EIPS/eip-1271 is needed
      const validation = await message.validate()
      console.log('validation', validation)
      setEthAddress(address)
      setEnsString(ens)
    } catch (error) {
      console.log(error)
    }
  }

  return mounted && (
    <div className={styles.container}>
      <Head>
        <title>Keychat</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Keychat!
        </h1>

        <p className={styles.description}>
          Give any Ethereum address a voice
        </p>
        <button className='button' onClick={() => signIn(window.ethereum && "window" || "walletconnect")}>
          <Image src="/ethereum_logo.svg" alt="Ethereum Logo" width={22} height={35} />
          <span>Sign in with Ethereum</span>
        </button>
        {window.ethereum &&
          <button className='linkButton' onClick={() => signIn("walletconnect")}>Use a wallet outside of the browser?</button>
        }
      </main>

      <footer className={styles.footer}>
        <p>Keychat was made by a human in Ambler, PA</p>
      </footer>
    </div>
  )
}
